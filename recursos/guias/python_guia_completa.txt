=======================================
🐍 GUÍA COMPLETA DE PYTHON - 2024 🐍
=======================================

ÍNDICE
------
1. Fundamentos
2. Estructuras de Datos
3. Programación Orientada a Objetos
4. Módulos y Paquetes
5. Desarrollo Web
6. Ciencia de Datos
7. Mejores Prácticas

1. FUNDAMENTOS
--------------
1.1 Variables y Tipos de Datos
    • Números (int, float)
    • Strings
    • Booleanos
    • None
    
    Ejemplo:
    nombre = "Ana"     # str
    edad = 25         # int
    altura = 1.75     # float
    es_estudiante = True  # bool

1.2 Operadores
    • Aritméticos: +, -, *, /, //, %, **
    • Comparación: ==, !=, >, <, >=, <=
    • Lógicos: and, or, not
    
    Ejemplo:
    resultado = 10 + 5  # 15
    es_mayor = edad > 18  # True

1.3 Control de Flujo
    • if-elif-else
    • for loops
    • while loops
    • break/continue
    
    Ejemplo:
    if edad >= 18:
        print("Mayor de edad")
    else:
        print("Menor de edad")

2. ESTRUCTURAS DE DATOS
----------------------
2.1 Listas
    • Creación y modificación
    • Métodos importantes
    • Slicing
    
    Ejemplo:
    numeros = [1, 2, 3, 4, 5]
    numeros.append(6)
    print(numeros[1:4])  # [2, 3, 4]

2.2 Tuplas
    • Inmutabilidad
    • Métodos
    • Usos comunes
    
    Ejemplo:
    coordenadas = (10, 20)
    x, y = coordenadas  # Desempaquetado

2.3 Diccionarios
    • Claves y valores
    • Métodos principales
    • Anidación
    
    Ejemplo:
    persona = {
        "nombre": "Juan",
        "edad": 30,
        "ciudad": "Madrid"
    }

3. PROGRAMACIÓN ORIENTADA A OBJETOS
---------------------------------
3.1 Clases y Objetos
    • Definición de clase
    • Constructor
    • Métodos
    
    Ejemplo:
    class Persona:
        def __init__(self, nombre, edad):
            self.nombre = nombre
            self.edad = edad
        
        def saludar(self):
            return f"Hola, soy {self.nombre}"

3.2 Herencia
    • Herencia simple
    • Herencia múltiple
    • super()
    
    Ejemplo:
    class Estudiante(Persona):
        def __init__(self, nombre, edad, carrera):
            super().__init__(nombre, edad)
            self.carrera = carrera

4. MÓDULOS Y PAQUETES
-------------------
4.1 Módulos Estándar
    • datetime
    • math
    • random
    • os
    
    Ejemplo:
    import datetime
    fecha_actual = datetime.datetime.now()

4.2 Paquetes Externos
    • pip
    • virtualenv
    • requirements.txt
    
    Ejemplo:
    pip install requests
    import requests

5. DESARROLLO WEB
---------------
5.1 Flask
    • Rutas
    • Templates
    • Forms
    
    Ejemplo:
    from flask import Flask
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return "¡Hola, mundo!"

5.2 Django
    • MVT
    • Admin
    • ORM
    
    Ejemplo:
    from django.db import models
    
    class Producto(models.Model):
        nombre = models.CharField(max_length=100)
        precio = models.DecimalField(max_digits=10, decimal_places=2)

6. CIENCIA DE DATOS
-----------------
6.1 NumPy
    • Arrays
    • Operaciones
    • Indexación
    
    Ejemplo:
    import numpy as np
    arr = np.array([1, 2, 3, 4, 5])
    print(arr * 2)  # [2 4 6 8 10]

6.2 Pandas
    • DataFrame
    • Series
    • Análisis
    
    Ejemplo:
    import pandas as pd
    df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})

7. MEJORES PRÁCTICAS
------------------
7.1 PEP 8
    • Convenciones de código
    • Espaciado
    • Nombres
    
    Ejemplo:
    # Correcto
    def calcular_promedio(numeros):
        return sum(numeros) / len(numeros)

7.2 Testing
    • unittest
    • pytest
    • doctest
    
    Ejemplo:
    def test_suma():
        assert suma(2, 2) == 4

7.3 Documentación
    • Docstrings
    • Type hints
    • README
    
    Ejemplo:
    def suma(a: int, b: int) -> int:
        """Suma dos números enteros."""
        return a + b

RECURSOS ADICIONALES
------------------
• Documentación oficial: https://docs.python.org/es/
• Tutorial interactivo: https://www.learnpython.org/
• Ejercicios prácticos: https://www.hackerrank.com/domains/python

CONSEJOS FINALES
--------------
1. Practica diariamente
2. Escribe código limpio y documentado
3. Participa en la comunidad
4. Construye proyectos propios
5. Mantente actualizado

¡FELIZ PROGRAMACIÓN! 🚀 